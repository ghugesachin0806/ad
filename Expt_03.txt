#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

pthread_mutex_t mutex;
pthread_cond_t cond_var;
int ready = 0;

void* thread_function(void* arg) {
    pthread_mutex_lock(&mutex);

    while (!ready) {
        pthread_cond_wait(&cond_var, &mutex);
    }

    printf("Thread: Condition met, proceeding...\n");
    pthread_mutex_unlock(&mutex);
    return NULL;
}

int main() {
    pthread_t thread;

    pthread_mutex_init(&mutex, NULL);
    pthread_cond_init(&cond_var, NULL);

    pthread_create(&thread, NULL, thread_function, NULL);

    sleep(1); // Simulate some work in the main thread
    pthread_mutex_lock(&mutex);
    ready = 1;
    pthread_cond_signal(&cond_var);
    pthread_mutex_unlock(&mutex);

    pthread_join(thread, NULL);

    pthread_mutex_destroy(&mutex);
    pthread_cond_destroy(&cond_var);

    return 0;
}